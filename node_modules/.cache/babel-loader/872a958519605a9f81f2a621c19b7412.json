{"ast":null,"code":"import { userService } from \"../utils/services\";\nexport var userActions = {\n  login: login,\n  logout: logout,\n  register: register\n};\n\nfunction login(email, password) {\n  return function (dispatch) {\n    dispatch({\n      type: \"LOGIN_REQUEST\",\n      email: email\n    });\n    userService.login(email, password).then(function (user) {\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        user: user\n      });\n    }).catch(function (error) {\n      dispatch({\n        type: \"LOGIN_FAILURE\",\n        error: error\n      });\n    });\n  };\n}\n\nfunction logout(email, password) {\n  userService.logout();\n  return {\n    type: \"LOGOUT\"\n  };\n}\n\nfunction register(username, password) {}","map":{"version":3,"sources":["/home/garonz/workspace/task-tracker/src/actions/user.actions.js"],"names":["userService","userActions","login","logout","register","email","password","dispatch","type","then","user","catch","error","username"],"mappings":"AAAA,SAASA,WAAT,QAA4B,mBAA5B;AACA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,KAAK,EAALA,KADyB;AAEzBC,EAAAA,MAAM,EAANA,MAFyB;AAGzBC,EAAAA,QAAQ,EAARA;AAHyB,CAApB;;AAMP,SAASF,KAAT,CAAeG,KAAf,EAAsBC,QAAtB,EAAgC;AAC9B,SAAO,UAAAC,QAAQ,EAAI;AACjBA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAE,eAAR;AAAyBH,MAAAA,KAAK,EAALA;AAAzB,KAAD,CAAR;AACAL,IAAAA,WAAW,CAACE,KAAZ,CAAkBG,KAAlB,EAAyBC,QAAzB,EAAmCG,IAAnC,CACE,UAAAC,IAAI,EAAI;AACNH,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,eAAR;AAAyBE,QAAAA,IAAI,EAAJA;AAAzB,OAAD,CAAR;AACD,KAHH,EAGKC,KAHL,CAIE,UAAAC,KAAK,EAAI;AACPL,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAE,eAAR;AAAyBI,QAAAA,KAAK,EAALA;AAAzB,OAAD,CAAR;AACD,KANH;AAQD,GAVD;AAWD;;AAED,SAAST,MAAT,CAAgBE,KAAhB,EAAuBC,QAAvB,EAAiC;AAC/BN,EAAAA,WAAW,CAACG,MAAZ;AACA,SAAO;AAAEK,IAAAA,IAAI,EAAE;AAAR,GAAP;AACD;;AAED,SAASJ,QAAT,CAAkBS,QAAlB,EAA4BP,QAA5B,EAAsC,CAAE","sourcesContent":["import { userService } from \"../utils/services\";\nexport const userActions = {\n  login,\n  logout,\n  register\n};\n\nfunction login(email, password) {\n  return dispatch => {\n    dispatch({ type: \"LOGIN_REQUEST\", email });\n    userService.login(email, password).then(\n      user => {\n        dispatch({ type: \"LOGIN_SUCCESS\", user });\n      }).catch(\n      error => {\n        dispatch({ type: \"LOGIN_FAILURE\", error });\n      }\n    );\n  };\n}\n\nfunction logout(email, password) {\n  userService.logout();\n  return { type: \"LOGOUT\" };\n}\n\nfunction register(username, password) {}\n"]},"metadata":{},"sourceType":"module"}